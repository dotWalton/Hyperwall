using Esri.ArcGISRuntime.Mapping;
using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Hyperwall3.MapClasses;

namespace Hyperwall3
{
    /// <summary>
    /// Creates Heat Vulnerability Map and Button Events
    /// </summary>
    public partial class HeatVulnerability : UserControl
    {

        HeatVulnerabilityMap mapClass = new HeatVulnerabilityMap();

        public HeatVulnerability()
        {
            InitializeComponent();
            OpenMMPK();
        }

        private async void OpenMMPK()
        {
            var filepath = mapClass.Filepath;
            Basemap heatBase = Basemap.CreateImageryWithLabels();

            try
            {
                // Load directly or unpack then load as needed by the map package.
                if (await MobileMapPackage.IsDirectReadSupportedAsync(filepath))
                {
                    // Open the map package.
                    MobileMapPackage heatMap = await MobileMapPackage.OpenAsync(filepath);
                    Map HeatVulnerabilityMap = heatMap.Maps.First();

                    // Check for map in .mmpk and give to corresponding views
                    if (heatMap.Maps.Count > 0)
                    {
                        HeatVuln.Map = HeatVulnerabilityMap;
                        HeatVuln.Map.Basemap = heatBase;
                        HeatVuln.Map.OperationalLayers[0].IsVisible = false; // Avg Temp / Daily Heating
                        HeatVuln.Map.OperationalLayers[1].IsVisible = false; // Impervous Surfaces
                        HeatVuln.Map.OperationalLayers[2].IsVisible = false; // Tree Canopy
                        HeatVuln.Map.OperationalLayers[3].IsVisible = true; // Heat Vulnerability
                        HeatVuln.Map.OperationalLayers[4].IsVisible = false; // Richmond Poverty
                    }
                }
                else
                {
                    // Create a path for the unpacked package.
                    string unpackedPath = filepath + "unpacked";

                    // Unpack the package.
                    await MobileMapPackage.UnpackAsync(filepath, unpackedPath);

                    // Open the package.
                    MobileMapPackage package = await MobileMapPackage.OpenAsync(unpackedPath);

                    // Load the package.
                    await package.LoadAsync();
                }                
            }
            catch (Exception e)
            {
                System.Windows.MessageBox.Show(e.ToString(), "Error");
            }
        }

        // Layer Visibility Click Events
        private void AvgTemp_Click(object sender, RoutedEventArgs e)
        {
            if (HeatVuln.Map.OperationalLayers[0].IsVisible == false)
            {
                HeatVuln.Map.OperationalLayers[0].IsVisible = true;
                HeatVuln.Map.OperationalLayers[1].IsVisible = false;
                HeatVuln.Map.OperationalLayers[2].IsVisible = false;
                HeatVuln.Map.OperationalLayers[3].IsVisible = false;
                HeatVuln.Map.OperationalLayers[4].IsVisible = false;

            }
            else
            {
                HeatVuln.Map.OperationalLayers[0].IsVisible = false;
            }
        }
        private void ImperviousSurfaces_Click(object sender, RoutedEventArgs e)
        {
            if (HeatVuln.Map.OperationalLayers[1].IsVisible == false)
            {
                HeatVuln.Map.OperationalLayers[1].IsVisible = true;
                HeatVuln.Map.OperationalLayers[0].IsVisible = false;
                HeatVuln.Map.OperationalLayers[2].IsVisible = false;
                HeatVuln.Map.OperationalLayers[3].IsVisible = false;
                HeatVuln.Map.OperationalLayers[4].IsVisible = false;
            }
            else
            {
                HeatVuln.Map.OperationalLayers[1].IsVisible = false;
            }
        }
        private void TreeCanopy_Click(object sender, RoutedEventArgs e)
        {
            if (HeatVuln.Map.OperationalLayers[2].IsVisible == false)
            {
                HeatVuln.Map.OperationalLayers[2].IsVisible = true;
                HeatVuln.Map.OperationalLayers[1].IsVisible = false;
                HeatVuln.Map.OperationalLayers[0].IsVisible = false;
                HeatVuln.Map.OperationalLayers[3].IsVisible = false;
                HeatVuln.Map.OperationalLayers[4].IsVisible = false;
            }
            else
            {
                HeatVuln.Map.OperationalLayers[2].IsVisible = false;
            }
        }
        private void HeatVulnerability_Click(object sender, RoutedEventArgs e)
        {
            if (HeatVuln.Map.OperationalLayers[3].IsVisible == false)
            {
                HeatVuln.Map.OperationalLayers[3].IsVisible = true;
                HeatVuln.Map.OperationalLayers[1].IsVisible = false;
                HeatVuln.Map.OperationalLayers[2].IsVisible = false;
                HeatVuln.Map.OperationalLayers[0].IsVisible = false;
                HeatVuln.Map.OperationalLayers[4].IsVisible = false;
            }
            else
            {
                HeatVuln.Map.OperationalLayers[3].IsVisible = false;
            }
        }
        private void RichmondPoverty_Click(object sender, RoutedEventArgs e)
        {
            if (HeatVuln.Map.OperationalLayers[4].IsVisible == false)
            {
                HeatVuln.Map.OperationalLayers[4].IsVisible = true;
                HeatVuln.Map.OperationalLayers[1].IsVisible = false;
                HeatVuln.Map.OperationalLayers[2].IsVisible = false;
                HeatVuln.Map.OperationalLayers[3].IsVisible = false;
                HeatVuln.Map.OperationalLayers[0].IsVisible = false;
            }
            else
            {
                HeatVuln.Map.OperationalLayers[4].IsVisible = false;
            }
        }
    }
}
